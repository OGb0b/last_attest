from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboard.inline_kb import start_keyboard_inline
from states.state_bot import BotStates, BusinessCreation
from sqlalchemy.ext.asyncio import AsyncSession
from data_base.models import User, Business
import datetime


router = Router()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        """
–ü—Ä–∏–≤–µ—Ç! üëã
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–ë–æ—Ç–∞ ‚Äî —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞—é—â–∏—Ö –∏–¥–µ–π!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤  
üìù –ü—Ä–∏–¥—É–º–∞—Ç—å —Ü–µ–ø–ª—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏  
üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã  
üìà –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–æ—Å—Ç–∞ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æüëá
""",
         reply_markup=start_keyboard_inline)
    await state.set_state(BotStates.Start)


@router.callback_query(F.data== 'add_business', BotStates.Start)
async def start_business_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(BusinessCreation.waiting_for_name)


@router.message(BusinessCreation.waiting_for_name)
async def process_business_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    await state.set_state(BusinessCreation.waiting_for_description)


@router.message(BusinessCreation.waiting_for_description)
async def process_business_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    await state.set_state(BusinessCreation.waiting_for_audience)


@router.message(BusinessCreation.waiting_for_audience)
async def process_business_audience(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession
):
    data = await state.get_data()
    await state.clear()

    try:
        user = await session.get(User, message.from_user.id)
        if not user:
            user = User(
                id=message.from_user.id,
                username=message.from_user.username,
                created_at=datetime.utcnow()
            )
            session.add(user)

        new_business = Business(
            user_id=user.id,
            name=data['name'],
            description=data['description'],
            target_audience=message.text,
            created_at=datetime.utcnow()
        )

        session.add(new_business)
        await session.commit()

        await message.answer(
            f"‚úÖ –ë–∏–∑–Ω–µ—Å '{new_business.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"ID: {new_business.id}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {new_business.description}\n"
            f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {new_business.target_audience}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: {str(e)}")
        await session.rollback()