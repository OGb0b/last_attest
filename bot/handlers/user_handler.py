from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboard.inline_kb import start_keyboard_inline
from states.state_bot import BotStates, BusinessCreation, CardCreation, DescriptionCreation, AdTextCreation
from generations.generations import generate_description as generate_product_description, generate_ad_text, generate_product_card
from data_base.models import User, Business
from data_base.db import SessionLocal
from datetime import datetime as dt
from sqlalchemy import select

router = Router()


@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        """
–ü—Ä–∏–≤–µ—Ç! üëã
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–ë–æ—Ç–∞ ‚Äî —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞—é—â–∏—Ö –∏–¥–µ–π!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üì¶ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤  
üìù –ü—Ä–∏–¥—É–º–∞—Ç—å —Ü–µ–ø–ª—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏  
üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã  
üìà –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–æ—Å—Ç–∞ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æüëá
""",
        reply_markup=start_keyboard_inline)
    await state.set_state(BotStates.Start)


@router.callback_query(F.data == 'add_business', BotStates.Start)
async def start_business_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(BusinessCreation.waiting_for_name)

@router.message(BusinessCreation.waiting_for_name)
async def process_business_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    await state.set_state(BusinessCreation.waiting_for_description)

@router.message(BusinessCreation.waiting_for_description)
async def process_business_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    await state.set_state(BusinessCreation.waiting_for_audience)

@router.message(BusinessCreation.waiting_for_audience)
async def process_business_audience(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        data = await state.get_data()
        await state.clear()
        try:
            result = await session.execute(select(User).where(User.id == message.from_user.id))
            user = result.scalar_one_or_none()

            if not user:
                user = User(id=message.from_user.id, username=message.from_user.username, created_at=dt.utcnow())
                session.add(user)
                await session.commit()

            new_business = Business(
                user_id=user.id,
                name=data['name'],
                description=data['description'],
                target_audience=message.text,
                created_at=dt.utcnow()
            )
            session.add(new_business)
            await session.commit()

            await message.answer(
                f"‚úÖ –ë–∏–∑–Ω–µ—Å '{new_business.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                f"ID: {new_business.id}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {new_business.description}\n"
                f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {new_business.target_audience}"
            )
            await message.answer("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard_inline)
            await state.set_state(BotStates.Start)

        except Exception as e:
            await session.rollback()
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: {str(e)}")
            await state.set_state(BotStates.Start)


@router.callback_query(F.data == 'delete_business', BotStates.Start)
async def choose_business_to_delete(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with SessionLocal() as session:
        try:
            user = await session.get(User, callback.from_user.id)
            if not user:
                await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤.")
                return

            result = await session.execute(select(Business).where(Business.user_id == user.id))
            businesses = result.scalars().all()

            if not businesses:
                await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤.")
                return

            builder = InlineKeyboardBuilder()
            for biz in businesses:
                builder.button(text=f"üóë {biz.name}", callback_data=f"delete_business_{biz.id}")
            builder.adjust(1)

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await session.rollback()

@router.callback_query(F.data.startswith("delete_business_"), BotStates.Start)
async def delete_selected_business(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    business_id = int(callback.data.split("_")[-1])

    async with SessionLocal() as session:
        try:
            business = await session.get(Business, business_id)

            if not business or business.user_id != callback.from_user.id:
                await callback.message.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            await session.delete(business)
            await session.commit()
            await callback.message.answer(f"‚úÖ –ë–∏–∑–Ω–µ—Å '{business.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=start_keyboard_inline)

        except Exception as e:
            await session.rollback()
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: {str(e)}")


@router.callback_query(F.data == 'create_card', BotStates.Start)
async def choose_business_for_card(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with SessionLocal() as session:
        try:
            user = await session.get(User, callback.from_user.id)
            result = await session.execute(select(Business).where(Business.user_id == user.id))
            businesses = result.scalars().all()

            if not businesses:
                await callback.message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å.")
                return

            builder = InlineKeyboardBuilder()
            for biz in businesses:
                builder.button(text=biz.name, callback_data=f"select_business_{biz.id}")
            builder.adjust(1)

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
            await state.set_state(CardCreation.waiting_for_name_description_etc)

        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await session.rollback()

@router.callback_query(F.data.startswith("select_business_"), CardCreation.waiting_for_name_description_etc)
async def ask_for_card_details(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    business_id = int(callback.data.split("_")[-1])
    await state.update_data(selected_business_id=business_id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(CardCreation.waiting_for_generation)

@router.message(CardCreation.waiting_for_generation)
async def generate_card(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(card_description=text)
    state_data = await state.get_data()
    business_id = state_data.get('selected_business_id')

    async with SessionLocal() as session:
        business = (await session.execute(select(Business).where(Business.id == business_id))).scalar_one_or_none()
        if not business:
            await message.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å —Å–Ω–æ–≤–∞.")
            await state.set_state(BotStates.Start)
            return

        try:
            image_url = generate_product_card(text, business.description, business.target_audience)
            await message.answer_photo(
                photo=image_url,
                caption=f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ {text} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=start_keyboard_inline
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    await state.set_state(BotStates.Start)


@router.callback_query(F.data == 'generate_description', BotStates.Start)
async def choose_business_for_description(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with SessionLocal() as session:
        try:
            user = await session.get(User, callback.from_user.id)
            result = await session.execute(select(Business).where(Business.user_id == user.id))
            businesses = result.scalars().all()

            if not businesses:
                await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–∏–∑–Ω–µ—Å.")
                return

            builder = InlineKeyboardBuilder()
            for biz in businesses:
                builder.button(text=biz.name, callback_data=f"select_business_{biz.id}")
            builder.adjust(1)

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
            await state.set_state(DescriptionCreation.waiting_for_generation)

        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await session.rollback()

@router.callback_query(F.data.startswith("select_business_"), DescriptionCreation.waiting_for_generation)
async def ask_for_description(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    business_id = int(callback.data.split("_")[-1])
    await state.update_data(selected_business_id=business_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:")

@router.message(DescriptionCreation.waiting_for_generation)
async def generate_description(message: Message, state: FSMContext):
    text = message.text
    state_data = await state.get_data()
    business_id = state_data.get('selected_business_id')

    async with SessionLocal() as session:
        try:
            business = (await session.execute(select(Business).where(Business.id == business_id))).scalar_one_or_none()
            if not business:
                await message.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.set_state(BotStates.Start)
                return

            description = generate_product_description(text, business.description, business.target_audience)
            await message.answer(
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ '{text}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n\n{description}",
                reply_markup=start_keyboard_inline
            )

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            await session.rollback()

    await state.set_state(BotStates.Start)


@router.callback_query(F.data == 'generate_ad_text', BotStates.Start)
async def choose_business_for_ad_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with SessionLocal() as session:
        try:
            user = await session.get(User, callback.from_user.id)
            result = await session.execute(select(Business).where(Business.user_id == user.id))
            businesses = result.scalars().all()

            if not businesses:
                await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–∏–∑–Ω–µ—Å.")
                return

            builder = InlineKeyboardBuilder()
            for biz in businesses:
                builder.button(text=biz.name, callback_data=f"select_business_{biz.id}")
            builder.adjust(1)

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:", reply_markup=builder.as_markup())
            await state.set_state(AdTextCreation.waiting_for_generation)

        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            await session.rollback()

@router.callback_query(F.data.startswith("select_business_"), AdTextCreation.waiting_for_generation)
async def ask_for_ad_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    business_id = int(callback.data.split("_")[-1])
    await state.update_data(selected_business_id=business_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")

@router.message(AdTextCreation.waiting_for_generation)
async def generate_ad_text_handler(message: Message, state: FSMContext):
    text = message.text
    state_data = await state.get_data()
    business_id = state_data.get('selected_business_id')

    async with SessionLocal() as session:
        try:
            business = (await session.execute(select(Business).where(Business.id == business_id))).scalar_one_or_none()
            if not business:
                await message.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.set_state(BotStates.Start)
                return

            ad = generate_ad_text(text, business.description, business.target_audience)
            await message.answer(
                f"–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è '{text}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n\n{ad}",
                reply_markup=start_keyboard_inline
            )

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã: {str(e)}")
            await session.rollback()

    await state.set_state(BotStates.Start)
